generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  userpin          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  sentRequests      P2PRequest[]        @relation("P2PRequestSender")
  receivedRequests  P2PRequest[]       @relation("P2PRequestReceiver")
  billSchedules     BillSchedule[]
}

model p2pTransfer {
  id         Int          @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id            Int          @id @default(autoincrement())
  status        OnRampStatus
  token         String       @unique
  provider      String
  amount        Int
  startTime     DateTime     @default(now())
  transactionId String?      @unique // Bank transaction ID
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  @@index([userId, startTime]) // Optimize queries
}

model P2PRequest {
  id           Int      @id @default(autoincrement())
  senderId     Int
  sender       User     @relation("P2PRequestSender", fields: [senderId], references: [id])
  receiverId   Int?
  receiver     User?    @relation("P2PRequestReceiver", fields: [receiverId], references: [id])
  receiverNumber String
  amount       Int      
  message      String?
  status       P2PRequestStatus @default(PENDING)
  createdAt    DateTime @default(now())
  settledAt    DateTime?
  
  @@map("p2p_requests")
}

model BillSchedule {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  billType    String   // ðŸš¨ FIXED: String (not enum)
  provider    String
  accountNo   String
  amount      Int      // ðŸš¨ FIXED: Int (not Float)
  dueDate     DateTime
  nextPayment DateTime?
  createdAt   DateTime @default(now())
  
  @@map("bill_schedules")
}

enum BillType {
  ELECTRICITY
  WATER
  GAS
  PHONE_RECHARGE
  DTH
}

enum P2PRequestStatus {
  PENDING
  SETTLED
  EXPIRED
  CANCELLED
}
model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}